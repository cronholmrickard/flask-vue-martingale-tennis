version: '3'
services:

  flask:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: flask
    restart: unless-stopped
    environment:
      APP_PORT: 5000
      MONGODB_USERNAME: tennis
      MONGODB_PASSWORD: tennis
      MONGODB_DATABASE: tennisdb
      MONGODB_HOSTNAME: mongodb
      MONGODB_PORT: 27017
    depends_on:
      - mongodb
    networks:
      frontend:
        ipv4_address: 10.0.1.100
      backend:

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodbuser
      MONGO_INITDB_ROOT_PASSWORD: your_mongodb_root_password
      MONGO_INITDB_DATABASE: tennisdb
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    ports:
      - "27017:27017"
    volumes:
      - mongodbdata:/data/db
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backend

  frontend:
    build:
      context: client
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "5000:5000"
    volumes:
      - nginxconf:/etc/nginx/conf.d
    depends_on:
      - flask
      - filepusher
    networks:
      frontend:
        ipv4_address: 10.0.1.101

  filepusher:
    image: alpine:latest
    volumes:
      - nginxconf:/confs
      - ./nginx/conf.d:/data
    command: find /data -mindepth 1 -maxdepth 1 -type f -exec cp {} /confs/ \;

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.1.0/24
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  nginxconf:
    driver: local
